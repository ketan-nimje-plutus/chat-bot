{"version":3,"sources":["components/chatbot/Chatbot.js","App.js","index.js"],"names":["Chatbot","_useState","useState","_useState2","_slicedToArray","showChat","setShowChat","_useState3","_useState4","chatMessages","setChatMessages","_useState5","_useState6","inputMessage","setInputMessage","_useState7","_useState8","selectedOption","setSelectedOption","chatContainerRef","useRef","_useState9","_useState10","_useState11","_useState12","isLoading","setIsLoading","_useState13","_useState14","jsonData","setJsonData","useEffect","data","hideChat","handleOptionClick","answer","question","selectedOptionMessage","text","isBot","timestamp","Date","toLocaleTimeString","prevMessages","concat","_toConsumableArray","typingMessage","isOption","setTimeout","botResponseMessage","filter","message","_jsonData$find","optionMessages","find","option","map","onClick","sendMessage","trim","newUserMessage","newMessages","updatedMessagesWithTyping","matchedData","optionsMessages","updatedMessages","slice","errorMessage","scrollToBottom","current","scrollToTop","_jsxs","className","children","_jsx","Button","welcomeMessage","startChat","callChatbotAPI","style","backgroundColor","AiOutlineMinus","AiOutlinePlus","Modal","show","onHide","Header","closeButton","Title","Body","ref","index","toLocaleString","hour","minute","hour12","_Fragment","options","type","placeholder","value","onChange","e","target","onKeyPress","key","disabled","AiOutlineSend","size","App","Router","Container","Route","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.897f8845.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { AiOutlinePlus, AiOutlineMinus, AiOutlineSend } from 'react-icons/ai';\r\nimport { FaUserAlt } from 'react-icons/fa';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport './ChatBot.css';\r\nimport axios from 'axios';\r\nimport data from './steps.json'\r\n\r\nfunction Chatbot() {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const chatContainerRef = useRef(null);\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [jsonData, setJsonData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setJsonData(data);\r\n  }, []);\r\n\r\n  const startChat = () => {\r\n    setShowChat(true);\r\n    const welcomeMessage = {\r\n      text: 'Welcome to the chat!',\r\n      isBot: true,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n    setChatMessages([welcomeMessage]);\r\n  };\r\n\r\n  const hideChat = () => {\r\n    setShowChat(false);\r\n    setChatMessages([]);\r\n    setSelectedOption(null);\r\n  };\r\n\r\n  const handleOptionClick = (answer, question) => {\r\n    // Display a typing indicator\r\n\r\n    const selectedOptionMessage = {\r\n      text: question,\r\n      isBot: false,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n    setChatMessages((prevMessages) => [...prevMessages, selectedOptionMessage]);\r\n    const typingMessage = {\r\n      text: 'Typing...',\r\n      isBot: true,\r\n      isOption: false,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n    setChatMessages((prevMessages) => [...prevMessages, typingMessage]);\r\n\r\n    setTimeout(() => {\r\n      const botResponseMessage = {\r\n        text: answer,\r\n        isBot: true,\r\n        isOption: false,\r\n        timestamp: new Date().toLocaleTimeString(),\r\n      };\r\n\r\n      setChatMessages((prevMessages) => {\r\n        const updatedMessages = prevMessages\r\n          .filter((message) => message.text !== 'Typing...')\r\n          .concat(botResponseMessage);\r\n        return updatedMessages;\r\n      });\r\n      if (!answer) {\r\n        const selectedOptions =\r\n          jsonData.find((data) => data.question === question)?.option;\r\n        const optionMessages = selectedOptions.map((option) => ({\r\n          text: option.question,\r\n          isBot: true,\r\n          isOption: true,\r\n          onClick: () => handleOptionClick(option.answer, option.question),\r\n        }));\r\n        setChatMessages((prevMessages) => [...prevMessages, ...optionMessages]);\r\n      }\r\n    }, 2000);\r\n  };\r\n\r\n  const sendMessage = () => {\r\n    if (inputMessage.trim() === '') return;\r\n    const newUserMessage = {\r\n      text: inputMessage,\r\n      isBot: false,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n\r\n    const newMessages = [...chatMessages, newUserMessage];\r\n    setChatMessages(newMessages);\r\n    setInputMessage('');\r\n\r\n    const updatedMessagesWithTyping = [...newMessages, isLoading];\r\n    setIsLoading(true);\r\n\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n      const matchedData = jsonData.find((data) => data.question === inputMessage);\r\n      if (matchedData) {\r\n        const botResponseMessage = {\r\n          text: matchedData.answer,\r\n          isBot: true,\r\n          timestamp: new Date().toLocaleTimeString(),\r\n        };\r\n        const optionsMessages = matchedData.option.map((option) => ({\r\n          text: option.question,\r\n          isBot: true,\r\n          isOption: true,\r\n          onClick: () => handleOptionClick(option.answer, option.question),\r\n        }));\r\n        const updatedMessages = [\r\n          ...updatedMessagesWithTyping.slice(0, -1),\r\n          botResponseMessage,\r\n          ...optionsMessages,\r\n        ];\r\n        setChatMessages(updatedMessages);\r\n      } else {\r\n        const errorMessage = {\r\n          text: 'Sorry, I couldn\\'t find a matching response for your question.',\r\n          isBot: true,\r\n          timestamp: new Date().toLocaleTimeString(),\r\n        };\r\n        const updatedMessages = [...updatedMessagesWithTyping.slice(0, -1), errorMessage];\r\n        setChatMessages(updatedMessages);\r\n      }\r\n      setSelectedOption(null);\r\n    }, 2000);\r\n    scrollToBottom();\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    if (chatContainerRef.current) {\r\n      chatContainerRef.current.scrollToBottom = chatContainerRef.current.scrollToTop;\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [chatMessages]);\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const callChatbotAPI = () => {\r\n    const matchedData = jsonData.find((data) => data.question === inputMessage);\r\n\r\n    if (matchedData) {\r\n      const botResponseMessage = {\r\n        text: matchedData.answer,\r\n        isBot: true,\r\n        timestamp: new Date().toLocaleTimeString(),\r\n      };\r\n\r\n      const optionsMessages = matchedData.option.map((option) => {\r\n        const optionMessage = {\r\n          text: option.question,\r\n          isBot: true,\r\n          isOption: true,\r\n          onClick: () => handleOptionClick(option.answer, option.question),\r\n        };\r\n        return optionMessage;\r\n      });\r\n\r\n      const updatedMessages = [botResponseMessage, ...optionsMessages];\r\n      setChatMessages(updatedMessages);\r\n    } else {\r\n      const errorMessage = {\r\n        text: 'Sorry, I couldn\\'t find a matching response for your question.',\r\n        isBot: true,\r\n        timestamp: new Date().toLocaleTimeString(),\r\n      };\r\n      const updatedMessages = [errorMessage];\r\n      setChatMessages(updatedMessages);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className='icon'>\r\n      <Button\r\n        onClick={showChat ? hideChat : () => {\r\n          startChat();\r\n          callChatbotAPI()\r\n        }}\r\n        style={{ backgroundColor: 'rgb(41, 164, 205)' }}\r\n      >\r\n        <i>\r\n          {showChat ? <AiOutlineMinus /> : <AiOutlinePlus />}\r\n        </i>\r\n      </Button>\r\n      <Modal show={showChat} onHide={hideChat}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title className='title'>Plutus</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className='message-text'>\r\n            helloo\r\n          </div>\r\n          <div className='chat-messages' ref={chatContainerRef}>\r\n            {chatMessages?.map((message, index) => (\r\n              <div\r\n                key={index}\r\n                className={`chat-message ${message.isBot ? 'left' : 'right'} ${message.isOption ? 'option-message' : ''}`}\r\n                onClick={message.isOption ? message.onClick : null}\r\n              >\r\n                <div className={`message-text ${message.isOption ? 'message-option' : ''}`}>\r\n                  {message.text}\r\n                </div>\r\n                {!message.isOption && (\r\n                  <div className='message-timestamp'>\r\n                    {new Date().toLocaleString('en-US', {\r\n                      hour: 'numeric',\r\n                      minute: 'numeric',\r\n                      hour12: true,\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n            {selectedOption && (\r\n              <>\r\n                <div className='chat-message right'>\r\n                  {/* <div className='message-content'> */}\r\n                  <div className='message-text'>\r\n                    {selectedOption.question}\r\n                    {/* </div> */}\r\n                  </div>\r\n                </div>\r\n                <div className='message-timestamp'>{new Date().toLocaleString('en-US', {\r\n                  hour: 'numeric',\r\n                  minute: 'numeric',\r\n                  hour12: true,\r\n                })}</div>\r\n                <div className='chat-message left'>\r\n                  {/* <div className='message-content'> */}\r\n                  <div className='message-text'>\r\n                    {selectedOption.answer}\r\n                    {/* </div> */}\r\n                  </div>\r\n                </div>\r\n                {selectedOption.options && selectedOption.options.map((option, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className='chat-message left message-option'\r\n                    onClick={option.onClick}\r\n                  >\r\n                    {/* <div className='message-content'> */}\r\n                    <div className={`message-text ${option.isOption ? 'message-option' : ''}`}>\r\n                      {option.question}\r\n                    </div>\r\n                    {/* </div> */}\r\n                  </div>\r\n                ))}\r\n\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          {isLoading ? (\r\n            <div className=\"dot-loader\">\r\n              <p>Typing</p>\r\n              <div className=\"dot\"></div>\r\n              <div className=\"dot\"></div>\r\n              <div className=\"dot\"></div>\r\n            </div>\r\n          ) : null}\r\n        </Modal.Body>\r\n\r\n        <div className='chat-input'>\r\n          <input\r\n            className=\"input\"\r\n            type='text'\r\n            placeholder='Type your message...'\r\n            value={inputMessage}\r\n            onChange={(e) => setInputMessage(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            disabled={isLoading}\r\n          />\r\n          <button className='send-button' onClick={sendMessage} disabled={isLoading}>\r\n            <AiOutlineSend size={\"1.7em\"} />\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Chatbot from './components/chatbot/Chatbot';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <main className=\".bg-light\">\r\n        <Container>\r\n          <div className=\"bot\">\r\n            <Route path=\"/\" component={Chatbot} exact />\r\n          </div>\r\n        </Container>\r\n      </main>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react'\nimport './bootstrap.min.css'\nimport './index.css'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}