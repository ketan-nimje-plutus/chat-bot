{"version":3,"sources":["components/chatbot/Chatbot.js","App.js","index.js"],"names":["Chatbot","_useState","useState","_useState2","_slicedToArray","showChat","setShowChat","_useState3","_useState4","chatMessages","setChatMessages","_useState5","_useState6","inputMessage","setInputMessage","_useState7","_useState8","selectedOption","setSelectedOption","chatContainerRef","useRef","_useState9","_useState10","_useState11","_useState12","isLoading","setIsLoading","hideChat","handleOptionClick","answer","question","selectedOptionMessage","text","isBot","timestamp","Date","toLocaleTimeString","prevMessages","concat","_toConsumableArray","typingMessage","setTimeout","botResponseMessage","typingIndex","findIndex","message","slice","sendMessage","trim","newUserMessage","newMessages","updatedMessagesWithTyping","axios","post","then","response","botResponse","data","scrollToBottom","Botresponse","optionsMessages","Array","isArray","Options","map","option","isOption","onClick","updatedMessages","catch","error","console","current","scrollTop","scrollHeight","useEffect","_jsxs","className","children","_jsx","Button","log","job","optionMessage","style","backgroundColor","AiOutlineMinus","AiOutlinePlus","Modal","show","onHide","Header","closeButton","Title","Body","ref","index","toLocaleString","hour","minute","hour12","_Fragment","options","type","placeholder","value","onChange","e","target","onKeyPress","key","disabled","AiOutlineSend","size","App","Router","Container","Route","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c60bf70a.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { AiOutlinePlus, AiOutlineMinus, AiOutlineSend } from 'react-icons/ai';\r\nimport { FaUserAlt } from 'react-icons/fa';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport './ChatBot.css';\r\nimport axios from 'axios';\r\n\r\nfunction Chatbot() {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const chatContainerRef = useRef(null);\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const startChat = () => {\r\n    setShowChat(true);\r\n  };\r\n  const hideChat = () => {\r\n    setShowChat(false);\r\n    setChatMessages([]);\r\n    setSelectedOption(null);\r\n  };\r\n  const handleOptionClick = (answer, question) => {\r\n    const selectedOptionMessage = {\r\n      text: question,\r\n      isBot: false,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n    setChatMessages((prevMessages) => [...prevMessages, selectedOptionMessage]);\r\n    const typingMessage = {\r\n      text: 'Typing...',\r\n      isBot: true,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n    setChatMessages((prevMessages) => [...prevMessages, typingMessage]);\r\n    setTimeout(() => {\r\n      const botResponseMessage = {\r\n        text: answer,\r\n        isBot: true,\r\n        timestamp: new Date().toLocaleTimeString(),\r\n      };\r\n      setChatMessages((prevMessages) => {\r\n        const typingIndex = prevMessages.findIndex(\r\n          (message) => message.text === 'Typing...'\r\n        );\r\n        if (typingIndex !== -1) {\r\n          const updatedMessages = [\r\n            ...prevMessages.slice(0, typingIndex),\r\n            botResponseMessage,\r\n            ...prevMessages.slice(typingIndex + 1),\r\n          ];\r\n\r\n          return updatedMessages;\r\n        }\r\n        return prevMessages;\r\n      });\r\n    }, 2000);\r\n  };\r\n  // const simulateTypings = (text) => {\r\n  //   const typingDelay = 10;\r\n  //   let currentIndex = 0;\r\n  //   const typingInterval = setInterval(() => {\r\n  //     setChatMessages((prevAnswer) => prevAnswer + text[currentIndex]);\r\n  //     currentIndex++;\r\n  //     if (currentIndex === text.length) {\r\n  //       clearInterval(typingInterval);\r\n  //       setIsLoading(false);\r\n  //     }\r\n  //   }, typingDelay);\r\n  // }\r\n  const sendMessage = () => {\r\n    if (inputMessage.trim() === '') return;\r\n    const newUserMessage = {\r\n      text: inputMessage,\r\n      isBot: false,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n    };\r\n\r\n    const newMessages = [...chatMessages, newUserMessage];\r\n    setChatMessages(newMessages);\r\n    setInputMessage('');\r\n    // const typingMessage = {\r\n    //   text: 'Typing...',\r\n    //   isBot: true,\r\n    //   timestamp: new Date().toLocaleTimeString(),\r\n    // };\r\n    const updatedMessagesWithTyping = [...newMessages, isLoading];\r\n    // setChatMessages(updatedMessagesWithTyping);\r\n\r\n    setIsLoading(true);\r\n\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n      axios\r\n        .post('http://localhost:9090/get', { question: inputMessage })\r\n        .then((response) => {\r\n          const botResponse = response.data;\r\n          scrollToBottom(); \r\n          const botResponseMessage = {\r\n            text: botResponse.Botresponse,\r\n            isBot: true,\r\n            timestamp: new Date().toLocaleTimeString(),\r\n          };\r\n          const optionsMessages = Array.isArray(botResponse.Options)\r\n            ? botResponse.Options.map((option) => ({\r\n              text: option.question,\r\n              isBot: true,\r\n              isOption: true,\r\n              onClick: () => handleOptionClick(option.answer, option.question),\r\n            }))\r\n            : [];\r\n          const updatedMessages = [\r\n            ...updatedMessagesWithTyping.slice(0, -1),\r\n            botResponseMessage,\r\n            ...optionsMessages,\r\n          ];\r\n          setChatMessages(updatedMessages);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error sending message:', error);\r\n        });\r\n      setSelectedOption(null);\r\n    }, 2000);\r\n    scrollToBottom();\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    if (chatContainerRef.current) {\r\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom(); // Scroll to the bottom when chatMessages change\r\n  }, [chatMessages]);\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      sendMessage();\r\n    \r\n    }\r\n  };\r\n\r\n  const callChatbotAPI = () => {\r\n    axios\r\n      .post('http://localhost:9090/get', { question: inputMessage })\r\n      .then(response => {\r\n        const botResponse = response.data;\r\n        console.log(botResponse.job,'botResponse')\r\n        const botResponseMessage = { text: botResponse.Botresponse, isBot: true };\r\n        console.log(botResponseMessage,'botResponseMessage')\r\n        const optionsMessages = Array.isArray(botResponse.Options)\r\n          ? botResponse.Options.map(option => {\r\n            const optionMessage = {\r\n              text: option.question,\r\n              isBot: true,  \r\n              isOption: true\r\n            };\r\n  \r\n            if (option.answer) {\r\n              optionMessage.onClick = () => handleOptionClick(option.answer, option.question);\r\n            }\r\n            else if (botResponse.answer){\r\n              optionMessage.onClick = () => handleOptionClick(botResponse.answer, option.question);\r\n            }\r\n  \r\n            return optionMessage;\r\n          })\r\n          : [];\r\n        const updatedMessages = [\r\n          botResponseMessage,\r\n          ...optionsMessages\r\n        ];\r\n        setChatMessages(updatedMessages);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error sending message:', error);\r\n      });\r\n  };\r\n  return (\r\n    <div className='icon'>\r\n      <Button\r\n        onClick={showChat ? hideChat : () => {\r\n          startChat();\r\n          callChatbotAPI()\r\n        }}\r\n        style={{ backgroundColor: '#f05454' }}\r\n      >\r\n        <i>\r\n          {showChat ? <AiOutlineMinus /> : <AiOutlinePlus />}\r\n        </i>\r\n      </Button>\r\n      <Modal show={showChat} onHide={hideChat}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title className='title'>BotChat</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className='chat-messages' ref={chatContainerRef}>\r\n            {chatMessages?.map((message, index) => (\r\n              <div\r\n                key={index}\r\n                className={`chat-message ${message.isBot ? 'left' : 'right'} ${message.isOption ? 'option-message' : ''\r\n                  }`}\r\n                onClick={message.isOption ? message.onClick : null}\r\n              >\r\n                <div className='message-content'>\r\n                  <div className='message-text'>{message.text}</div>\r\n                </div>\r\n                {!message.isOption && (\r\n                  <div className='message-timestamp'>\r\n                    {new Date().toLocaleString('en-US', {\r\n                      // month: 'short',\r\n                      // day: 'numeric',\r\n                      hour: 'numeric',\r\n                      minute: 'numeric',\r\n                      hour12: true,\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n            {selectedOption && (\r\n              <>\r\n                <div className='chat-message right'>\r\n                  <div className='message-content'>\r\n                    <div className='message-text'>\r\n                      {selectedOption.question}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className='message-timestamp'>{new Date().toLocaleString('en-US', {\r\n                  // month: 'short',\r\n                  // day: 'numeric',\r\n                  hour: 'numeric',\r\n                  minute: 'numeric',\r\n                  hour12: true,\r\n                })}</div>\r\n                <div className='chat-message left'>\r\n                  <div className='message-content'>\r\n                    <div className='message-text'>\r\n                      {selectedOption.answer}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {selectedOption.options && selectedOption.options.map((option, index) => (\r\n                  <div\r\n                    key={index}\r\n                    className='chat-message left option-message'\r\n                    onClick={option.onClick}\r\n                  >\r\n                    <div className='message-content'>\r\n                      <div className='message-text'>\r\n                        {option.question}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          {isLoading ? (\r\n            <div className=\"dot-loader\">\r\n              <p>Typing</p>\r\n              <div className=\"dot\"></div>\r\n              <div className=\"dot\"></div>\r\n              <div className=\"dot\"></div>\r\n            </div>\r\n          ) : null}\r\n        </Modal.Body>\r\n\r\n        <div className='chat-input'>\r\n          <input\r\n            className=\"input\"\r\n            type='text'\r\n            placeholder='Type your message...'\r\n            value={inputMessage}\r\n            onChange={(e) => setInputMessage(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            disabled={isLoading}\r\n          />\r\n          <button className='send-button' onClick={sendMessage} disabled={isLoading}>\r\n            <AiOutlineSend size={\"1.7em\"} />\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n","import React from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Chatbot from './components/chatbot/Chatbot';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <main className=\".bg-light\">\r\n        <Container>\r\n          <div className=\"bot\">\r\n            <Route path=\"/\" component={Chatbot} exact />\r\n          </div>\r\n        </Container>\r\n      </main>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react'\nimport './bootstrap.min.css'\nimport './index.css'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}